version: "3.8"

services:
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    ports:
      - 5173:5173
    volumes:
      - ./frontend:/frontend
      - /frontend/node_modules # Zapewnia, że node_modules nie będą nadpisywane przez wolumeny
    environment:
      - VITE_API_URL=http://localhost:8000 # Zmieniamy na localhost zamiast backend
    command: >
      sh -c "npm install && npm run dev -- --host 0.0.0.0" # Dodanie --host 0.0.0.0 aby było dostępne z zewnątrz
    depends_on:
      backend:
        condition: service_healthy # Zależność od zdrowego backendu
    networks:
      - app-network

  backend:
    build:
      context: .
    ports:
      - 8000:8000
    volumes:
      - ./backend:/backend
    command: >
      sh -c "python manage.py migrate && python manage.py runserver 0.0.0.0:8000"
    environment:
      - DB_HOST=db
      - DB_NAME=db
      - DB_USER=user
      - DB_PASS=localdevpw
      - CELERY_BROKER_URL=amqp://garage:garage123@rabbitmq:5672//
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  db:
    image: postgres:17.1
    volumes:
      - db-data:/var/lib/postgresql/data
    ports:
      - 5432:5432
    environment:
      - POSTGRES_DB=db
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=localdevpw
      - CELERY_BROKER_URL=amqp://garage:garage123@rabbitmq:5672//
    healthcheck:
      test: ["CMD", "pg_isready", "-q", "-d", "db", "-U", "user"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  rabbitmq:
    image: rabbitmq:3.13.7-management-alpine # Zmiana na wersję z panelem zarządzania
    hostname: garage-rabbitmq
    ports:
      - 5672:5672
      - 15672:15672
    environment:
      - RABBITMQ_DEFAULT_USER=garage
      - RABBITMQ_DEFAULT_PASS=garage123
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  worker:
    build:
      context: .
    volumes:
      - ./backend:/backend
    command: >
      sh -c "celery -A backend worker -l INFO"
    environment:
      - DB_HOST=db
      - DB_NAME=db
      - DB_USER=user
      - DB_PASS=localdevpw
      - CELERY_BROKER_URL=amqp://garage:garage123@rabbitmq:5672//
    depends_on:
      - backend
      - rabbitmq
    networks:
      - app-network

  notification-worker:
    build:
      context: .
    volumes:
      - ./backend:/backend
    command: >
      sh -c "python notifications/notification_worker.py"
    environment:
      - DB_HOST=db
      - DB_NAME=db
      - DB_USER=user
      - DB_PASS=localdevpw
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_USER=garage
      - RABBITMQ_PASS=garage123
    depends_on:
      backend:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - app-network

volumes:
  db-data:
  rabbitmq-data:

networks:
  app-network:
    driver: bridge
